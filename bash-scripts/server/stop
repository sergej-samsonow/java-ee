#!/bin/bash
# amt stop - stop application command

if [ -f $AMT_PID_FILE ]
then

    # check is process running or not
    AMT_PID=$(cat $AMT_PID_FILE)
    msg "Stop application pid: $AMT_PID"
    if kill -0 $AMT_PID > /dev/null 2>&1
    then
        msg "Sent TERM signal"
        if [ -z "$AMT_MAX_SECONDS_WAIT_FOR_STOP" ]
        then
            kill $AMT_PID
            sleep 1
            if kill -0 $AMT_PID > /dev/null 2>&1
            then
                msg "Application process still alive sent KILL signal"
                kill -9 $AMT_PID
                if kill -0 $AMT_PID > /dev/null 2>&1
                then
                    error "System is busy KILL has signal has no effect application is still alive" 
                    exit 1
                fi 
            fi
        else
             
            WAIT_UNTIL=$(date --date="$AMT_MAX_SECONDS_WAIT_FOR_STOP seconds"  +'%s')
            WAIT=$(date  +'%s')
            WAIT_SECONDS=$((WAIT_UNTIL - WAIT)) 
            PRINT_MSG_TIMER=$WAIT_SECONDS
            msg "Application has $PRINT_MSG_TIMER seconds to stop"
            while kill -0 $AMT_PID > /dev/null 2>&1
            do
                kill $AMT_PID
                WAIT=$(date +'%s')
                WAIT_SECONDS=$((WAIT_UNTIL - WAIT))
                if [ $((PRINT_MSG_TIMER - WAIT_SECONDS)) -gt 3 ]
                then
                    PRINT_MSG_TIMER=$WAIT_SECONDS
                    msg "Application not stopped yet, wait another $WAIT_SECONDS seconds"
                fi
            done
            if kill -0 $AMT_PID > /dev/null 2>&1
            then
                msg "Application process still alive sent KILL signal"
                kill -9 $AMT_PID
                if kill -0 $AMT_PID > /dev/null 2>&1
                then
                    error "System is busy KILL has signal has no effect application is still alive"
                    exit 1
                fi 
            fi
        fi
    fi
    rm -f $AMT_PID_FILE
fi
msg "Application stopped"
exit 0
